name: Comprehensive Testing

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16, 18, 20]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Run Backend Unit Tests
        run: |
          if [ -d "cloud-backend" ]; then
            cd cloud-backend
            npm ci
            npm run test:unit || echo "Unit tests not configured"
          fi

      - name: Run Mobile App Unit Tests
        run: |
          if [ -d "mobile-app" ]; then
            cd mobile-app
            npm ci
            npm run test:unit || echo "Unit tests not configured"
          fi

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: irrigation_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      mosquitto:
        image: eclipse-mosquitto:latest
        ports:
          - 1883:1883

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Wait for services
        run: |
          sleep 10
          nc -z localhost 5432
          nc -z localhost 6379
          nc -z localhost 1883

      - name: Run Backend Integration Tests
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/irrigation_test
          REDIS_URL: redis://localhost:6379
          MQTT_BROKER: mqtt://localhost:1883
        run: |
          if [ -d "cloud-backend" ]; then
            cd cloud-backend
            npm ci
            npm run test:integration || echo "Integration tests not configured"
          fi

      - name: Run Mobile App Integration Tests
        run: |
          if [ -d "mobile-app" ]; then
            cd mobile-app
            npm ci
            npm run test:integration || echo "Integration tests not configured"
          fi

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Playwright
        run: |
          npm install -g @playwright/test
          npx playwright install

      - name: Start services
        run: |
          # Start backend services
          if [ -d "cloud-backend" ]; then
            cd cloud-backend
            npm ci
            npm start &
            sleep 10
          fi

      - name: Run E2E Tests
        run: |
          if [ -f "e2e/playwright.config.js" ]; then
            npx playwright test
          else
            echo "E2E tests not configured"
          fi

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-results
          path: test-results/

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install k6
        run: |
          curl https://github.com/grafana/k6/releases/download/v0.46.0/k6-v0.46.0-linux-amd64.tar.gz -L | tar xvz --strip-components 1

      - name: Run Performance Tests
        run: |
          if [ -f "tests/performance/load-test.js" ]; then
            ./k6 run tests/performance/load-test.js
          else
            echo "Performance tests not configured"
          fi

  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run OWASP ZAP
        uses: zaproxy/action-full-scan@v0.4.0
        with:
          target: 'http://localhost:3000'

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten

      - name: Upload security results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: results.sarif

  mobile-tests:
    name: Mobile App Tests
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup React Native
        run: |
          if [ -d "mobile-app" ]; then
            cd mobile-app
            npm ci
            npx react-native info
          fi

      - name: Run iOS Tests
        run: |
          if [ -d "mobile-app" ]; then
            cd mobile-app
            npm run test:ios || echo "iOS tests not configured"
          fi

      - name: Run Android Tests
        run: |
          if [ -d "mobile-app" ]; then
            cd mobile-app
            npm run test:android || echo "Android tests not configured"
          fi

  edge-tests:
    name: Edge Device Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Arduino CLI
        uses: arduino/setup-arduino-cli@v1

      - name: Install libraries
        run: |
          arduino-cli core update-index
          arduino-cli core install esp32:esp32
          arduino-cli lib install "WiFi" "ArduinoJson" "PubSubClient"

      - name: Run device simulation tests
        run: |
          if [ -d "Edge/tests" ]; then
            echo "Running edge device simulation tests"
            # Add device simulation test commands here
          else
            echo "Edge device tests not configured"
          fi

  test-report:
    name: Test Report
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, performance-tests, security-tests]
    if: always()
    steps:
      - name: Generate test report
        run: |
          echo "## Test Results Summary" > test-report.md
          echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> test-report.md
          echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> test-report.md
          echo "- E2E Tests: ${{ needs.e2e-tests.result }}" >> test-report.md
          echo "- Performance Tests: ${{ needs.performance-tests.result }}" >> test-report.md
          echo "- Security Tests: ${{ needs.security-tests.result }}" >> test-report.md

      - name: Upload test report
        uses: actions/upload-artifact@v3
        with:
          name: test-report
          path: test-report.md
